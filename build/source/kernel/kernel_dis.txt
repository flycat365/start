
C:/Users/acer/Desktop/caoauo/diy-x86os-master/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/Users/acer/Desktop/caoauo/diy-x86os-master/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x000000c4 memsz 0x000008e0 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000800  000100e0  000100e0  000010c4  2**5
                  ALLOC
  2 .debug_line   0000031d  00000000  00000000  000010c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000033a  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001aa  00000000  00000000  0000171b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  000018c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    000002a9  00000000  00000000  00001928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001bd1  2**0
                  CONTENTS, READONLY
  8 .debug_frame  000000a8  00000000  00000000  00001be4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000100e0 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cpu.c
000100e0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
000100ab g     F .text	0000000b cpu_init
000100b6 g     F .text	0000000e kernel_init
00010000 g       .text	00000000 _start
00010077 g     F .text	00000034 init_gdt
0001000c g     F .text	0000006b segment_desc_set



Disassembly of section .text:

00010000 <_start>:
    .global _start
_start:
    //push %ebp
    //mov  %esp, %ebp
    //mov 0x8(%ebp), %eax
    mov 4(%esp), %eax
   10000:	8b 44 24 04          	mov    0x4(%esp),%eax


    push %eax
   10004:	50                   	push   %eax

    call kernel_init
   10005:	e8 ac 00 00 00       	call   100b6 <kernel_init>
    jmp .
   1000a:	eb fe                	jmp    1000a <_start+0xa>

0001000c <segment_desc_set>:


static segment_desc_t gdt_table[GDT_TABLE_SIZE];

//selector
void segment_desc_set (int selector,uint32_t base,uint32_t limit, uint16_t attr){
   1000c:	55                   	push   %ebp
   1000d:	89 e5                	mov    %esp,%ebp
   1000f:	83 ec 14             	sub    $0x14,%esp
   10012:	8b 45 14             	mov    0x14(%ebp),%eax
   10015:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc=gdt_table +selector/sizeof(segment_desc_t);
   10019:	8b 45 08             	mov    0x8(%ebp),%eax
   1001c:	83 e0 f8             	and    $0xfffffff8,%eax
   1001f:	05 e0 00 01 00       	add    $0x100e0,%eax
   10024:	89 45 fc             	mov    %eax,-0x4(%ebp)
     desc->limit15_0=limit &0xFFFF;
   10027:	8b 45 10             	mov    0x10(%ebp),%eax
   1002a:	89 c2                	mov    %eax,%edx
   1002c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1002f:	66 89 10             	mov    %dx,(%eax)
     desc->base15_0=base & 0xFFFF;
   10032:	8b 45 0c             	mov    0xc(%ebp),%eax
   10035:	89 c2                	mov    %eax,%edx
   10037:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1003a:	66 89 50 02          	mov    %dx,0x2(%eax)
     desc->base23_16=(base>>16)&0xFF;
   1003e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10041:	c1 e8 10             	shr    $0x10,%eax
   10044:	89 c2                	mov    %eax,%edx
   10046:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10049:	88 50 04             	mov    %dl,0x4(%eax)
     desc->attr =attr|(((limit>>16)&0xF)<<8);
   1004c:	8b 45 10             	mov    0x10(%ebp),%eax
   1004f:	c1 e8 10             	shr    $0x10,%eax
   10052:	c1 e0 08             	shl    $0x8,%eax
   10055:	66 25 00 0f          	and    $0xf00,%ax
   10059:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1005d:	89 c2                	mov    %eax,%edx
   1005f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10062:	66 89 50 05          	mov    %dx,0x5(%eax)
     desc->base31_24=(base>>24)&0xFF;
   10066:	8b 45 0c             	mov    0xc(%ebp),%eax
   10069:	c1 e8 18             	shr    $0x18,%eax
   1006c:	89 c2                	mov    %eax,%edx
   1006e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10071:	88 50 07             	mov    %dl,0x7(%eax)




}
   10074:	90                   	nop
   10075:	c9                   	leave  
   10076:	c3                   	ret    

00010077 <init_gdt>:

void init_gdt(){
   10077:	55                   	push   %ebp
   10078:	89 e5                	mov    %esp,%ebp
   1007a:	83 ec 10             	sub    $0x10,%esp
    for(int i=0;i<GDT_TABLE_SIZE;i++){
   1007d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10084:	eb 19                	jmp    1009f <init_gdt+0x28>
        segment_desc_set(i*sizeof(segment_desc_t),0,0,0);//左移三
   10086:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10089:	c1 e0 03             	shl    $0x3,%eax
   1008c:	6a 00                	push   $0x0
   1008e:	6a 00                	push   $0x0
   10090:	6a 00                	push   $0x0
   10092:	50                   	push   %eax
   10093:	e8 74 ff ff ff       	call   1000c <segment_desc_set>
   10098:	83 c4 10             	add    $0x10,%esp
    for(int i=0;i<GDT_TABLE_SIZE;i++){
   1009b:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1009f:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   100a6:	7e de                	jle    10086 <init_gdt+0xf>


    }


}
   100a8:	90                   	nop
   100a9:	c9                   	leave  
   100aa:	c3                   	ret    

000100ab <cpu_init>:
void   cpu_init(void){
   100ab:	55                   	push   %ebp
   100ac:	89 e5                	mov    %esp,%ebp
    init_gdt();
   100ae:	e8 c4 ff ff ff       	call   10077 <init_gdt>


}
   100b3:	90                   	nop
   100b4:	5d                   	pop    %ebp
   100b5:	c3                   	ret    

000100b6 <kernel_init>:
//  static int stayic_global_var_zero;


//  const int const_int =0x33;
//  const char *str="abcdrfg";
void kernel_init(boot_info_t *boot_info){
   100b6:	55                   	push   %ebp
   100b7:	89 e5                	mov    %esp,%ebp
   100b9:	83 ec 08             	sub    $0x8,%esp
    // int local_var;
    // static int static_local_var=0x33;
    // static int static_local_var_zero;
    cpu_init();
   100bc:	e8 ea ff ff ff       	call   100ab <cpu_init>


   100c1:	90                   	nop
   100c2:	c9                   	leave  
   100c3:	c3                   	ret    
