
C:/Users/acer/Desktop/caoauo/diy-x86os-master/diy-x86os-master/start/start/build/source/loader/loader.elf:     file format elf32-i386
C:/Users/acer/Desktop/caoauo/diy-x86os-master/diy-x86os-master/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000006b2 memsz 0x000006b2 flags r-x
    LOAD off    0x000016b4 vaddr 0x000096b4 paddr 0x000096b4 align 2**12
         filesz 0x00000018 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067b  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000037  0000867b  0000867b  0000167b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  000096b4  000096b4  000016b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  000096e0  000096e0  000016cc  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000016e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092c  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000319  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000430  00000000  00000000  00002385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  000027b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  00002a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002eca  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
0000867b l    d  .rodata	00000000 .rodata
000096b4 l    d  .data	00000000 .data
000096e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 CMakeFiles/loader.dir/start.obj
00008036 l       .text	00000000 read_loader
00000000 l    df *ABS*	00000000 loader_16.c
00008060 l     F .text	0000000b cli
0000806b l     F .text	0000002a inb
00008095 l     F .text	0000002d outb
000080c2 l     F .text	00000036 lgdt
000080f8 l     F .text	0000001a read_cr0
00008112 l     F .text	00000012 write_cr0
00008124 l     F .text	00000035 far_jump
00008159 l     F .text	0000003b show_msg
00008194 l     F .text	00000122 detect_memory
000082b6 l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
0000836f l     F .text	0000001d inb
0000838c l     F .text	0000001f inw
000083ab l     F .text	0000001f outb
000083ca l     F .text	00000145 read_disk
0000850f l     F .text	0000011a reload_elf_file
00008629 l     F .text	00000005 dile
0000834c g     F .text	00000023 loader_entry
000096b4 g     O .data	00000018 gdt_table
0000862e g     F .text	0000004d load_kernel
000096e0 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
000096cc g       .bss	00000000 __bss_start
0000804a g       .text	00000000 protect_mode_entry
000096cc g       .data	00000000 _edata
00009734 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text
	.global _start
	.extern loader_entry
_start:

	mov $0xe, %ah
    8000:	b4 0e                	mov    $0xe,%ah
	mov $' ', %al
    8002:	b0 20                	mov    $0x20,%al
	int $0x10 
    8004:	cd 10                	int    $0x10
	
	mov $0xe, %ah
    8006:	b4 0e                	mov    $0xe,%ah
	mov $'T', %al
    8008:	b0 54                	mov    $0x54,%al
	int $0x10 
    800a:	cd 10                	int    $0x10

	mov $0xe, %ah
    800c:	b4 0e                	mov    $0xe,%ah
	mov $'Y', %al
    800e:	b0 59                	mov    $0x59,%al
	int $0x10 
    8010:	cd 10                	int    $0x10

	mov $0xe, %ah
    8012:	b4 0e                	mov    $0xe,%ah
	mov $' ', %al
    8014:	b0 20                	mov    $0x20,%al
	int $0x10 
    8016:	cd 10                	int    $0x10

	mov $0xe, %ah
    8018:	b4 0e                	mov    $0xe,%ah
	mov $'i', %al
    801a:	b0 69                	mov    $0x69,%al
	int $0x10 
    801c:	cd 10                	int    $0x10

	mov $0xe, %ah
    801e:	b4 0e                	mov    $0xe,%ah
	mov $'s', %al
    8020:	b0 73                	mov    $0x73,%al
	int $0x10 
    8022:	cd 10                	int    $0x10
	                                                                                                                
	mov $0xe, %ah
    8024:	b4 0e                	mov    $0xe,%ah
	mov $' ', %al
    8026:	b0 20                	mov    $0x20,%al
	int $0x10 
    8028:	cd 10                	int    $0x10

	mov $0xe, %ah
    802a:	b4 0e                	mov    $0xe,%ah
	mov $'s', %al
    802c:	b0 73                	mov    $0x73,%al
	int $0x10 
    802e:	cd 10                	int    $0x10

	mov $0xe, %ah
    8030:	b4 0e                	mov    $0xe,%ah
	mov $'b', %al
    8032:	b0 62                	mov    $0x62,%al
	int $0x10 
    8034:	cd 10                	int    $0x10

00008036 <read_loader>:
read_loader:
	mov $0x8000, %bx
    8036:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %ah
    8039:	b4 02                	mov    $0x2,%ah
	mov $0x2, %cx
    803b:	b9 02 00             	mov    $0x2,%cx
	mov $64, %al
    803e:	b0 40                	mov    $0x40,%al
	mov $0x0080, %dx
    8040:	ba 80 00             	mov    $0x80,%dx
	int $0x13
    8043:	cd 13                	int    $0x13
	jc read_loader
    8045:	72 ef                	jb     8036 <read_loader>

	jmp  loader_entry
    8047:	e9 02 03             	jmp    834c <loader_entry>

0000804a <protect_mode_entry>:
	.code32
	.text  
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16, %ax
    804a:	66 b8 10 00 66 89    	mov    $0x89660010,%eax
	mov %ax, %dx
    8050:	c2 8e d0             	ret    $0xd08e
	mov %ax, %ss
	mov %ax, %es
    8053:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    8055:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    8057:	8e e8                	mov    %ax,%gs
	jmp $8, $load_kernel
    8059:	ea 2e 86 00 00       	ljmp   $0x0,$0x862e
    805e:	08 00                	or     %al,(%bx,%si)

00008060 <cli>:

#include"types.h"


//cli代码段
static inline void cli(void){
    8060:	66 55                	push   %ebp
    8062:	66 89 e5             	mov    %esp,%ebp

__asm__ __volatile__("cli");
    8065:	fa                   	cli    
}
    8066:	90                   	nop
    8067:	66 5d                	pop    %ebp
    8069:	66 c3                	retl   

0000806b <inb>:

__asm__ __volatile__("sti");
}

//
static inline uint8_t inb (uint16_t port ){
    806b:	66 55                	push   %ebp
    806d:	66 89 e5             	mov    %esp,%ebp
    8070:	66 83 ec 14          	sub    $0x14,%esp
    8074:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8079:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv): [p]"d"(port));
    807d:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8083:	66 89 c2             	mov    %eax,%edx
    8086:	ec                   	in     (%dx),%al
    8087:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    808b:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax

}
    8091:	66 c9                	leavel 
    8093:	66 c3                	retl   

00008095 <outb>:
    __asm__ __volatile__("in %[p], %[v]":[v]"=a"(rv): [p]"d"(port));
    return rv;

}

static inline void outb(uint16_t port ,uint8_t date){
    8095:	66 55                	push   %ebp
    8097:	66 89 e5             	mov    %esp,%ebp
    809a:	66 83 ec 08          	sub    $0x8,%esp
    809e:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    80a3:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a8:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    80ac:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(date));
    80b0:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    80b6:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    80bc:	ee                   	out    %al,(%dx)


}
    80bd:	90                   	nop
    80be:	66 c9                	leavel 
    80c0:	66 c3                	retl   

000080c2 <lgdt>:

//inter的手册代码加载的数据的地址和大小在哪里。
static inline  void lgdt(uint32_t start,uint32_t size){
    80c2:	66 55                	push   %ebp
    80c4:	66 89 e5             	mov    %esp,%ebp
    80c7:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;

    }gdt;
    gdt.start31_16=start>>16;
    80cb:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d0:	66 c1 e8 10          	shr    $0x10,%eax
    80d4:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0=start&0XFFFF;
    80d8:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80dd:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit=size-1;
    80e1:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80e6:	66 83 e8 01          	sub    $0x1,%eax
    80ea:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    {
        /* data */
    };
    
    __asm__ __volatile("lgdt %[g]"::[g]"m"(gdt));
    80ee:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
} 
    80f3:	90                   	nop
    80f4:	66 c9                	leavel 
    80f6:	66 c3                	retl   

000080f8 <read_cr0>:



static inline uint16_t read_cr0(void){
    80f8:	66 55                	push   %ebp
    80fa:	66 89 e5             	mov    %esp,%ebp
    80fd:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    8101:	0f 20 c0             	mov    %cr0,%eax
    8104:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    8109:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax



}
    810e:	66 c9                	leavel 
    8110:	66 c3                	retl   

00008112 <write_cr0>:


static inline void write_cr0(uint32_t v){
    8112:	66 55                	push   %ebp
    8114:	66 89 e5             	mov    %esp,%ebp
      __asm__ __volatile__("mov %[v],%%cr0"::[v]"r"(v));
    8117:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    811c:	0f 22 c0             	mov    %eax,%cr0

}
    811f:	90                   	nop
    8120:	66 5d                	pop    %ebp
    8122:	66 c3                	retl   

00008124 <far_jump>:
static inline void far_jump(uint16_t selector, uint32_t offset){
    8124:	66 55                	push   %ebp
    8126:	66 89 e5             	mov    %esp,%ebp
    8129:	66 83 ec 14          	sub    $0x14,%esp
    812d:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8132:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
     
     
     uint32_t addr[]={offset,selector};
    8136:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    813b:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    8140:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8146:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

     __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    814b:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8150:	67 66 ff 28          	ljmpl  *(%eax)





}
    8154:	90                   	nop
    8155:	66 c9                	leavel 
    8157:	66 c3                	retl   

00008159 <show_msg>:
__asm__(".code16gcc");
#include"loader.h"

  boot_info_t boot_info;

static void show_msg(const char * msg){
    8159:	66 55                	push   %ebp
    815b:	66 89 e5             	mov    %esp,%ebp
    815e:	66 83 ec 10          	sub    $0x10,%esp
    char c;
while((c=*msg++)!='\0'){
    8162:	eb 0c                	jmp    8170 <show_msg+0x17>
    asm(
    8164:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    816a:	b4 0e                	mov    $0xe,%ah
    816c:	88 c0                	mov    %al,%al
    816e:	cd 10                	int    $0x10
while((c=*msg++)!='\0'){
    8170:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8175:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    817a:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    817f:	67 66 0f b6 00       	movzbl (%eax),%eax
    8184:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8188:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    818d:	75 d5                	jne    8164 <show_msg+0xb>
    "int $0x10"::[ch]"r"(c)
    );}
   


}
    818f:	90                   	nop
    8190:	66 c9                	leavel 
    8192:	66 c3                	retl   

00008194 <detect_memory>:

static void detect_memory(void){
    8194:	66 55                	push   %ebp
    8196:	66 89 e5             	mov    %esp,%ebp
    8199:	66 57                	push   %edi
    819b:	66 56                	push   %esi
    819d:	66 53                	push   %ebx
    819f:	66 83 ec 30          	sub    $0x30,%esp
uint32_t contID=0;
    81a3:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    81aa:	00 00 
SMAP_entry_t smap_entry;
uint32_t signature, bytes;
show_msg("try to detect meomery");
    81ac:	66 68 7b 86 00 00    	pushl  $0x867b
    81b2:	66 e8 a1 ff ff ff    	calll  8159 <show_msg>
    81b8:	66 83 c4 04          	add    $0x4,%esp


boot_info.ram_region_count=0;
    81bc:	66 c7 06 30 97 00 00 	movl   $0x0,-0x68d0
    81c3:	00 00 
for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    81c5:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    81cc:	00 00 
    81ce:	e9 b9 00             	jmp    828a <detect_memory+0xf6>
    SMAP_entry_t*entry=&smap_entry;
    81d1:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    81d6:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

     __asm__ __volatile__(
    81db:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    81e1:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    81e6:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81ec:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81f2:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81f7:	66 89 f7             	mov    %esi,%edi
    81fa:	cd 15                	int    $0x15
    81fc:	66 89 da             	mov    %ebx,%edx
    81ff:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    8204:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    8209:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
            "int $0x15" 
            :"=a"(signature), "=c"(bytes), "=b"(contID)
            :"a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)
        );
    if (signature != 0x534D4150 || bytes == 0){
    820e:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    8215:	4d 53 
    8217:	75 08                	jne    8221 <detect_memory+0x8d>
    8219:	67 66 83 7d e0 00    	cmpl   $0x0,-0x20(%ebp)
    821f:	75 12                	jne    8233 <detect_memory+0x9f>
            show_msg("fail in losder_16.c\r\n");
    8221:	66 68 91 86 00 00    	pushl  $0x8691
    8227:	66 e8 2c ff ff ff    	calll  8159 <show_msg>
    822d:	66 83 c4 04          	add    $0x4,%esp

            return;
    8231:	eb 74                	jmp    82a7 <detect_memory+0x113>

        continue;
    }


    if(entry->Type==1){
    8233:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8238:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    823d:	66 83 f8 01          	cmp    $0x1,%eax
    8241:	75 39                	jne    827c <detect_memory+0xe8>

        boot_info.ram_region_cfg[boot_info.ram_region_count].start=entry->BaseL;
    8243:	66 a1 30 97          	mov    0x9730,%eax
    8247:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    824c:	67 66 8b 12          	mov    (%edx),%edx
    8250:	67 66 89 14 c5 e0 96 	mov    %edx,0x96e0(,%eax,8)
    8257:	00 00 
        
        boot_info.ram_region_cfg[boot_info.ram_region_count].size=entry->LengthL;
    8259:	66 a1 30 97          	mov    0x9730,%eax
    825d:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8262:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8267:	67 66 89 14 c5 e4 96 	mov    %edx,0x96e4(,%eax,8)
    826e:	00 00 

        boot_info.ram_region_count++;
    8270:	66 a1 30 97          	mov    0x9730,%eax
    8274:	66 83 c0 01          	add    $0x1,%eax
    8278:	66 a3 30 97          	mov    %eax,0x9730
    }
         
    if(contID==0){
    827c:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8282:	74 12                	je     8296 <detect_memory+0x102>
for(int i=0;i<BOOT_RAM_REGION_MAX;i++){
    8284:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    828a:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8290:	0f 8e 3d ff          	jle    81d1 <detect_memory+0x3d>
    8294:	eb 01                	jmp    8297 <detect_memory+0x103>

        break;
    8296:	90                   	nop




    }
    show_msg("ok");
    8297:	66 68 a7 86 00 00    	pushl  $0x86a7
    829d:	66 e8 b6 fe ff ff    	calll  8159 <show_msg>
    82a3:	66 83 c4 04          	add    $0x4,%esp

}
    82a7:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    82ac:	66 5b                	pop    %ebx
    82ae:	66 5e                	pop    %esi
    82b0:	66 5f                	pop    %edi
    82b2:	66 5d                	pop    %ebp
    82b4:	66 c3                	retl   

000082b6 <enter_protect_mode>:




//关中断
static void enter_protect_mode(void){
    82b6:	66 55                	push   %ebp
    82b8:	66 89 e5             	mov    %esp,%ebp
    82bb:	66 83 ec 10          	sub    $0x10,%esp

    cli();
    82bf:	66 e8 9b fd ff ff    	calll  8060 <cli>
    
    uint8_t v=inb(0x92);
    82c5:	66 68 92 00 00 00    	pushl  $0x92
    82cb:	66 e8 9a fd ff ff    	calll  806b <inb>
    82d1:	66 83 c4 04          	add    $0x4,%esp
    82d5:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92,v|0x2);
    82d9:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82df:	66 83 c8 02          	or     $0x2,%eax
    82e3:	66 0f b6 c0          	movzbl %al,%eax
    82e7:	66 50                	push   %eax
    82e9:	66 68 92 00 00 00    	pushl  $0x92
    82ef:	66 e8 a0 fd ff ff    	calll  8095 <outb>
    82f5:	66 83 c4 08          	add    $0x8,%esp

    lgdt((uint32_t)gdt_table,sizeof(gdt_table));
    82f9:	66 b8 b4 96 00 00    	mov    $0x96b4,%eax
    82ff:	66 6a 18             	pushl  $0x18
    8302:	66 50                	push   %eax
    8304:	66 e8 b8 fd ff ff    	calll  80c2 <lgdt>
    830a:	66 83 c4 08          	add    $0x8,%esp
    
    uint32_t cr0=read_cr0();
    830e:	66 e8 e4 fd ff ff    	calll  80f8 <read_cr0>
    8314:	66 0f b7 c0          	movzwl %ax,%eax
    8318:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    
    write_cr0(cr0|(1<<0));
    831d:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    8322:	66 83 c8 01          	or     $0x1,%eax
    8326:	66 50                	push   %eax
    8328:	66 e8 e4 fd ff ff    	calll  8112 <write_cr0>
    832e:	66 83 c4 04          	add    $0x4,%esp

    far_jump(8, (uint32_t)protect_mode_entry);
    8332:	66 b8 4a 80 00 00    	mov    $0x804a,%eax
    8338:	66 50                	push   %eax
    833a:	66 6a 08             	pushl  $0x8
    833d:	66 e8 e1 fd ff ff    	calll  8124 <far_jump>
    8343:	66 83 c4 08          	add    $0x8,%esp

}
    8347:	90                   	nop
    8348:	66 c9                	leavel 
    834a:	66 c3                	retl   

0000834c <loader_entry>:

void loader_entry(void){
    834c:	66 55                	push   %ebp
    834e:	66 89 e5             	mov    %esp,%ebp
show_msg(".....\n\r");
    8351:	66 68 aa 86 00 00    	pushl  $0x86aa
    8357:	66 e8 fc fd ff ff    	calll  8159 <show_msg>
    835d:	66 83 c4 04          	add    $0x4,%esp
detect_memory();
    8361:	66 e8 2d fe ff ff    	calll  8194 <detect_memory>
enter_protect_mode();
    8367:	66 e8 49 ff ff ff    	calll  82b6 <enter_protect_mode>
for(;;){}
    836d:	eb fe                	jmp    836d <loader_entry+0x21>

0000836f <inb>:
static inline uint8_t inb (uint16_t port ){
    836f:	55                   	push   %bp
    8370:	89 e5                	mov    %sp,%bp
    8372:	83 ec 14             	sub    $0x14,%sp
    8375:	8b 45 08             	mov    0x8(%di),%ax
    8378:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p], %[v]":[v]"=a"(rv): [p]"d"(port));
    837c:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8380:	89 c2                	mov    %ax,%dx
    8382:	ec                   	in     (%dx),%al
    8383:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    8386:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    838a:	c9                   	leave  
    838b:	c3                   	ret    

0000838c <inw>:
static inline uint16_t inw (uint16_t port ){
    838c:	55                   	push   %bp
    838d:	89 e5                	mov    %sp,%bp
    838f:	83 ec 14             	sub    $0x14,%sp
    8392:	8b 45 08             	mov    0x8(%di),%ax
    8395:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %[p], %[v]":[v]"=a"(rv): [p]"d"(port));
    8399:	0f b7 45 ec          	movzww -0x14(%di),%ax
    839d:	89 c2                	mov    %ax,%dx
    839f:	66 ed                	in     (%dx),%eax
    83a1:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    83a5:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    83a9:	c9                   	leave  
    83aa:	c3                   	ret    

000083ab <outb>:
static inline void outb(uint16_t port ,uint8_t date){
    83ab:	55                   	push   %bp
    83ac:	89 e5                	mov    %sp,%bp
    83ae:	83 ec 08             	sub    $0x8,%sp
    83b1:	8b 55 08             	mov    0x8(%di),%dx
    83b4:	8b 45 0c             	mov    0xc(%di),%ax
    83b7:	66 89 55 fc          	mov    %edx,-0x4(%di)
    83bb:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(date));
    83be:	0f b7 55 fc          	movzww -0x4(%di),%dx
    83c2:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    83c6:	ee                   	out    %al,(%dx)
}
    83c7:	90                   	nop
    83c8:	c9                   	leave  
    83c9:	c3                   	ret    

000083ca <read_disk>:
#define PORT_1F5 0x1F5
#define PORT_1F6 0x1F6
#define PORT_1F7 0x1F7
//读取磁盘扇区

static void read_disk(uint32_t sector, uint32_t sector_count, uint8_t *buf) {
    83ca:	55                   	push   %bp
    83cb:	89 e5                	mov    %sp,%bp
    83cd:	53                   	push   %bx
    83ce:	83 ec 10             	sub    $0x10,%sp
    if (buf == NULL || sector_count == 0) return;
    83d1:	83 7d 10 00          	cmpw   $0x0,0x10(%di)
    83d5:	0f 84 2e 01          	je     8507 <read_disk+0x13d>
    83d9:	00 00                	add    %al,(%bx,%si)
    83db:	83 7d 0c 00          	cmpw   $0x0,0xc(%di)
    83df:	0f 84 24 01          	je     8507 <read_disk+0x13d>
    83e3:	00 00                	add    %al,(%bx,%si)

    outb(PORT_1F6, 0xE0);
    83e5:	68 e0 00             	push   $0xe0
    83e8:	00 00                	add    %al,(%bx,%si)
    83ea:	68 f6 01             	push   $0x1f6
    83ed:	00 00                	add    %al,(%bx,%si)
    83ef:	e8 b7 ff             	call   83a9 <inw+0x1d>
    83f2:	ff                   	(bad)  
    83f3:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(PORT_1F2, sector_count >> 8);
    83f7:	8b 45 0c             	mov    0xc(%di),%ax
    83fa:	c1 e8 08             	shr    $0x8,%ax
    83fd:	0f b6 c0             	movzbw %al,%ax
    8400:	50                   	push   %ax
    8401:	68 f2 01             	push   $0x1f2
    8404:	00 00                	add    %al,(%bx,%si)
    8406:	e8 a0 ff             	call   83a9 <inw+0x1d>
    8409:	ff                   	(bad)  
    840a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F3, sector >> 24);
    840e:	8b 45 08             	mov    0x8(%di),%ax
    8411:	c1 e8 18             	shr    $0x18,%ax
    8414:	0f b6 c0             	movzbw %al,%ax
    8417:	50                   	push   %ax
    8418:	68 f3 01             	push   $0x1f3
    841b:	00 00                	add    %al,(%bx,%si)
    841d:	e8 89 ff             	call   83a9 <inw+0x1d>
    8420:	ff                   	(bad)  
    8421:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F4, 0);
    8425:	6a 00                	push   $0x0
    8427:	68 f4 01             	push   $0x1f4
    842a:	00 00                	add    %al,(%bx,%si)
    842c:	e8 7a ff             	call   83a9 <inw+0x1d>
    842f:	ff                   	(bad)  
    8430:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F5, 0);
    8434:	6a 00                	push   $0x0
    8436:	68 f5 01             	push   $0x1f5
    8439:	00 00                	add    %al,(%bx,%si)
    843b:	e8 6b ff             	call   83a9 <inw+0x1d>
    843e:	ff                   	(bad)  
    843f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(PORT_1F2, sector_count);
    8443:	8b 45 0c             	mov    0xc(%di),%ax
    8446:	0f b6 c0             	movzbw %al,%ax
    8449:	50                   	push   %ax
    844a:	68 f2 01             	push   $0x1f2
    844d:	00 00                	add    %al,(%bx,%si)
    844f:	e8 57 ff             	call   83a9 <inw+0x1d>
    8452:	ff                   	(bad)  
    8453:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F3, sector);
    8457:	8b 45 08             	mov    0x8(%di),%ax
    845a:	0f b6 c0             	movzbw %al,%ax
    845d:	50                   	push   %ax
    845e:	68 f3 01             	push   $0x1f3
    8461:	00 00                	add    %al,(%bx,%si)
    8463:	e8 43 ff             	call   83a9 <inw+0x1d>
    8466:	ff                   	(bad)  
    8467:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F4, sector >> 8);
    846b:	8b 45 08             	mov    0x8(%di),%ax
    846e:	c1 e8 08             	shr    $0x8,%ax
    8471:	0f b6 c0             	movzbw %al,%ax
    8474:	50                   	push   %ax
    8475:	68 f4 01             	push   $0x1f4
    8478:	00 00                	add    %al,(%bx,%si)
    847a:	e8 2c ff             	call   83a9 <inw+0x1d>
    847d:	ff                   	(bad)  
    847e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(PORT_1F5, sector >> 16);
    8482:	8b 45 08             	mov    0x8(%di),%ax
    8485:	c1 e8 10             	shr    $0x10,%ax
    8488:	0f b6 c0             	movzbw %al,%ax
    848b:	50                   	push   %ax
    848c:	68 f5 01             	push   $0x1f5
    848f:	00 00                	add    %al,(%bx,%si)
    8491:	e8 15 ff             	call   83a9 <inw+0x1d>
    8494:	ff                   	(bad)  
    8495:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(PORT_1F7, 0x24);
    8499:	6a 24                	push   $0x24
    849b:	68 f7 01             	push   $0x1f7
    849e:	00 00                	add    %al,(%bx,%si)
    84a0:	e8 06 ff             	call   83a9 <inw+0x1d>
    84a3:	ff                   	(bad)  
    84a4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    uint16_t *data_buf = (uint16_t *)buf;
    84a8:	8b 45 10             	mov    0x10(%di),%ax
    84ab:	89 45 f8             	mov    %ax,-0x8(%di)
    while (sector_count--) {
    84ae:	eb 4a                	jmp    84fa <read_disk+0x130>
        while ((inb(PORT_1F7) & 0x88) != 0x08) {}
    84b0:	90                   	nop
    84b1:	68 f7 01             	push   $0x1f7
    84b4:	00 00                	add    %al,(%bx,%si)
    84b6:	e8 b4 fe             	call   836d <loader_entry+0x21>
    84b9:	ff                   	(bad)  
    84ba:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84be:	0f b6 c0             	movzbw %al,%ax
    84c1:	25 88 00             	and    $0x88,%ax
    84c4:	00 00                	add    %al,(%bx,%si)
    84c6:	83 f8 08             	cmp    $0x8,%ax
    84c9:	75 e6                	jne    84b1 <read_disk+0xe7>

        for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84cb:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84d0:	00 00                	add    %al,(%bx,%si)
    84d2:	eb 1d                	jmp    84f1 <read_disk+0x127>
            *data_buf++ = inw(0x1F0);
    84d4:	8b 5d f8             	mov    -0x8(%di),%bx
    84d7:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84da:	89 45 f8             	mov    %ax,-0x8(%di)
    84dd:	68 f0 01             	push   $0x1f0
    84e0:	00 00                	add    %al,(%bx,%si)
    84e2:	e8 a5 fe             	call   838a <inb+0x1b>
    84e5:	ff                   	(bad)  
    84e6:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84ea:	66 89 03             	mov    %eax,(%bp,%di)
        for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84ed:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84f1:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84f6:	00 00                	add    %al,(%bx,%si)
    84f8:	7e da                	jle    84d4 <read_disk+0x10a>
    while (sector_count--) {
    84fa:	8b 45 0c             	mov    0xc(%di),%ax
    84fd:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    8500:	89 55 0c             	mov    %dx,0xc(%di)
    8503:	85 c0                	test   %ax,%ax
    8505:	75 a9                	jne    84b0 <read_disk+0xe6>
    8507:	eb 01                	jmp    850a <read_disk+0x140>
    if (buf == NULL || sector_count == 0) return;
    8509:	90                   	nop
        }
    }
}
    850a:	8b 5d fc             	mov    -0x4(%di),%bx
    850d:	c9                   	leave  
    850e:	c3                   	ret    

0000850f <reload_elf_file>:
//内存载入
static uint32_t reload_elf_file(uint8_t *file_buffer){
    850f:	55                   	push   %bp
    8510:	89 e5                	mov    %sp,%bp
    8512:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr *elf_hdr=(Elf32_Ehdr*)file_buffer;
    8515:	8b 45 08             	mov    0x8(%di),%ax
    8518:	89 45 e8             	mov    %ax,-0x18(%di)
    if((elf_hdr->e_ident[0]!=0x7F) || (elf_hdr->e_ident[1] !='E')
    851b:	8b 45 e8             	mov    -0x18(%di),%ax
    851e:	0f b6 00             	movzbw (%bx,%si),%ax
    8521:	3c 7f                	cmp    $0x7f,%al
    8523:	75 21                	jne    8546 <reload_elf_file+0x37>
    8525:	8b 45 e8             	mov    -0x18(%di),%ax
    8528:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    852c:	3c 45                	cmp    $0x45,%al
    852e:	75 16                	jne    8546 <reload_elf_file+0x37>
     ||(elf_hdr->e_ident[2]!='L')||(elf_hdr->e_ident[3]!='F')){
    8530:	8b 45 e8             	mov    -0x18(%di),%ax
    8533:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    8537:	3c 4c                	cmp    $0x4c,%al
    8539:	75 0b                	jne    8546 <reload_elf_file+0x37>
    853b:	8b 45 e8             	mov    -0x18(%di),%ax
    853e:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    8542:	3c 46                	cmp    $0x46,%al
    8544:	74 0a                	je     8550 <reload_elf_file+0x41>




        return 0;
    8546:	b8 00 00             	mov    $0x0,%ax
    8549:	00 00                	add    %al,(%bx,%si)
    854b:	e9 d7 00             	jmp    8625 <reload_elf_file+0x116>
    854e:	00 00                	add    %al,(%bx,%si)
     }
     for(int i=0;i<elf_hdr->e_phnum;i++){
    8550:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8555:	00 00                	add    %al,(%bx,%si)
    8557:	e9 b2 00             	jmp    860c <reload_elf_file+0xfd>
    855a:	00 00                	add    %al,(%bx,%si)

        Elf32_Phdr*phdr=(Elf32_Phdr*)(file_buffer+elf_hdr->e_phoff)+i;
    855c:	8b 45 e8             	mov    -0x18(%di),%ax
    855f:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8562:	8b 45 08             	mov    0x8(%di),%ax
    8565:	01 c2                	add    %ax,%dx
    8567:	8b 45 fc             	mov    -0x4(%di),%ax
    856a:	c1 e0 05             	shl    $0x5,%ax
    856d:	01 d0                	add    %dx,%ax
    856f:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type!=PT_LOAD){
    8572:	8b 45 e4             	mov    -0x1c(%di),%ax
    8575:	8b 00                	mov    (%bx,%si),%ax
    8577:	83 f8 01             	cmp    $0x1,%ax
    857a:	0f 85 89 00          	jne    8607 <reload_elf_file+0xf8>
    857e:	00 00                	add    %al,(%bx,%si)


            continue;
        }
    uint8_t *src=file_buffer+phdr->p_offset;
    8580:	8b 45 e4             	mov    -0x1c(%di),%ax
    8583:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8586:	8b 45 08             	mov    0x8(%di),%ax
    8589:	01 d0                	add    %dx,%ax
    858b:	89 45 f8             	mov    %ax,-0x8(%di)
    uint8_t *dest=(uint8_t*)phdr->p_paddr;
    858e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8591:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8594:	89 45 f4             	mov    %ax,-0xc(%di)
    for(int j=0;j<phdr->p_filesz;j++){
    8597:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    859c:	00 00                	add    %al,(%bx,%si)
    859e:	eb 1b                	jmp    85bb <reload_elf_file+0xac>




        *dest++=*src++;
    85a0:	8b 55 f8             	mov    -0x8(%di),%dx
    85a3:	8d 42 01             	lea    0x1(%bp,%si),%ax
    85a6:	89 45 f8             	mov    %ax,-0x8(%di)
    85a9:	8b 45 f4             	mov    -0xc(%di),%ax
    85ac:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85af:	89 4d f4             	mov    %cx,-0xc(%di)
    85b2:	0f b6 12             	movzbw (%bp,%si),%dx
    85b5:	88 10                	mov    %dl,(%bx,%si)
    for(int j=0;j<phdr->p_filesz;j++){
    85b7:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85bb:	8b 45 e4             	mov    -0x1c(%di),%ax
    85be:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85c1:	8b 45 f0             	mov    -0x10(%di),%ax
    85c4:	39 c2                	cmp    %ax,%dx
    85c6:	77 d8                	ja     85a0 <reload_elf_file+0x91>
    }

    dest=(uint8_t*)phdr->p_paddr+phdr->p_filesz;
    85c8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85cb:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85ce:	8b 45 e4             	mov    -0x1c(%di),%ax
    85d1:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85d4:	01 d0                	add    %dx,%ax
    85d6:	89 45 f4             	mov    %ax,-0xc(%di)

    for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    85d9:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85de:	00 00                	add    %al,(%bx,%si)
    85e0:	eb 10                	jmp    85f2 <reload_elf_file+0xe3>


        *dest++=0;
    85e2:	8b 45 f4             	mov    -0xc(%di),%ax
    85e5:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85e8:	89 55 f4             	mov    %dx,-0xc(%di)
    85eb:	c6 00 00             	movb   $0x0,(%bx,%si)
    for(int j=0;j<phdr->p_memsz-phdr->p_filesz;j++){
    85ee:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85f2:	8b 45 e4             	mov    -0x1c(%di),%ax
    85f5:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85f8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85fb:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85fe:	29 c2                	sub    %ax,%dx
    8600:	8b 45 ec             	mov    -0x14(%di),%ax
    8603:	39 c2                	cmp    %ax,%dx
    8605:	77 db                	ja     85e2 <reload_elf_file+0xd3>
    8607:	eb 01                	jmp    860a <reload_elf_file+0xfb>
            continue;
    8609:	90                   	nop
     for(int i=0;i<elf_hdr->e_phnum;i++){
    860a:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    860e:	8b 45 e8             	mov    -0x18(%di),%ax
    8611:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    8615:	0f b7 c0             	movzww %ax,%ax
    8618:	39 45 fc             	cmp    %ax,-0x4(%di)
    861b:	0f 8c 3b ff          	jl     855a <reload_elf_file+0x4b>
    861f:	ff                   	(bad)  
    8620:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
    }



     }
     return elf_hdr->e_entry;
    8624:	8b 40 18             	mov    0x18(%bx,%si),%ax

}
    8627:	c9                   	leave  
    8628:	c3                   	ret    

00008629 <dile>:
static void dile(int code){
    8629:	55                   	push   %bp
    862a:	89 e5                	mov    %sp,%bp



    for(;;){
    862c:	eb fe                	jmp    862c <dile+0x3>

0000862e <load_kernel>:

    }
}
void load_kernel(void){
    862e:	55                   	push   %bp
    862f:	89 e5                	mov    %sp,%bp
    8631:	83 ec 18             	sub    $0x18,%sp

    read_disk(100 ,500 ,(uint8_t*)SYS_KERNEL_LOAD_ADDR); //这里500太小内核会不够
    8634:	68 00 00             	push   $0x0
    8637:	10 00                	adc    %al,(%bx,%si)
    8639:	68 f4 01             	push   $0x1f4
    863c:	00 00                	add    %al,(%bx,%si)
    863e:	6a 64                	push   $0x64
    8640:	e8 85 fd             	call   83c8 <outb+0x1d>
    8643:	ff                   	(bad)  
    8644:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    uint32_t kernel_entry=reload_elf_file((uint8_t*)SYS_KERNEL_LOAD_ADDR);
    8648:	68 00 00             	push   $0x0
    864b:	10 00                	adc    %al,(%bx,%si)
    864d:	e8 bd fe             	call   850d <read_disk+0x143>
    8650:	ff                   	(bad)  
    8651:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8655:	89 45 f4             	mov    %ax,-0xc(%di)
    if (kernel_entry==0){
    8658:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    865c:	75 0a                	jne    8668 <load_kernel+0x3a>



        dile(-1);
    865e:	6a ff                	push   $0xffff
    8660:	e8 c4 ff             	call   8627 <reload_elf_file+0x118>
    8663:	ff                   	(bad)  
    8664:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }

    ((void(*)(boot_info_t*))kernel_entry)(& boot_info);
    8668:	8b 45 f4             	mov    -0xc(%di),%ax
    866b:	83 ec 0c             	sub    $0xc,%sp
    866e:	68 e0 96             	push   $0x96e0
    8671:	00 00                	add    %al,(%bx,%si)
    8673:	ff d0                	call   *%ax
    8675:	83 c4 10             	add    $0x10,%sp
    // for(;;){


        
    // }
    8678:	90                   	nop
    8679:	c9                   	leave  
    867a:	c3                   	ret    
